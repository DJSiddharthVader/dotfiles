let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
nnoremap <buffer> <silent> \rd :call RSetWD()
nnoremap <buffer> <silent> \ko :call RMakeRmd("odt_document")
nnoremap <buffer> <silent> \kh :call RMakeRmd("html_document")
nnoremap <buffer> <silent> \kw :call RMakeRmd("word_document")
nnoremap <buffer> <silent> \kl :call RMakeRmd("beamer_presentation")
nnoremap <buffer> <silent> \kp :call RMakeRmd("pdf_document")
nnoremap <buffer> <silent> \kr :call RMakeRmd("default")
nnoremap <buffer> <silent> \r- :call RBrOpenCloseLs(0)
nnoremap <buffer> <silent> \r= :call RBrOpenCloseLs(1)
nnoremap <buffer> <silent> \ro :call RObjBrowser()
nnoremap <buffer> <silent> \rb :call RAction("plotsumm")
nnoremap <buffer> <silent> \rg :call RAction("plot")
nnoremap <buffer> <silent> \rs :call RAction("summary")
nnoremap <buffer> <silent> \rh :call RAction("help")
nnoremap <buffer> <silent> \re :call RAction("example")
nnoremap <buffer> <silent> \ra :call RAction("args")
nnoremap <buffer> <silent> \tp :call RAction("printtab")
nnoremap <buffer> <silent> \td :call RAction("dputtab")
nnoremap <buffer> <silent> \rv :call RAction("viewdf")
nnoremap <buffer> <silent> \rt :call RAction("str")
nnoremap <buffer> <silent> \rn :call RAction("nvim.names")
nnoremap <buffer> <silent> \rp :call RAction("print")
nnoremap <buffer> <silent> \rm :call RClearAll()
nnoremap <buffer> <silent> \rr :call RClearConsole()
nnoremap <buffer> <silent> \rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> \o :call SendLineToRAndInsertOutput()0
nnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> \xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> \xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> \xx :call RComment("normal")
nnoremap <buffer> <silent> \rw :call RQuit('save')
nnoremap <buffer> <silent> \rq :call RQuit('nosave')
nnoremap <buffer> <silent> \rc :call StartR("custom")
nnoremap <buffer> <silent> \rf :call StartR("R")
vnoremap <buffer> <silent> \rd :call RSetWD()
onoremap <buffer> <silent> \rd :call RSetWD()
vnoremap <buffer> <silent> \ko :call RMakeRmd("odt_document")
onoremap <buffer> <silent> \ko :call RMakeRmd("odt_document")
vnoremap <buffer> <silent> \kh :call RMakeRmd("html_document")
onoremap <buffer> <silent> \kh :call RMakeRmd("html_document")
vnoremap <buffer> <silent> \kw :call RMakeRmd("word_document")
onoremap <buffer> <silent> \kw :call RMakeRmd("word_document")
vnoremap <buffer> <silent> \kl :call RMakeRmd("beamer_presentation")
onoremap <buffer> <silent> \kl :call RMakeRmd("beamer_presentation")
vnoremap <buffer> <silent> \kp :call RMakeRmd("pdf_document")
onoremap <buffer> <silent> \kp :call RMakeRmd("pdf_document")
vnoremap <buffer> <silent> \kr :call RMakeRmd("default")
onoremap <buffer> <silent> \kr :call RMakeRmd("default")
vnoremap <buffer> <silent> \r- :call RBrOpenCloseLs(0)
onoremap <buffer> <silent> \r- :call RBrOpenCloseLs(0)
vnoremap <buffer> <silent> \r= :call RBrOpenCloseLs(1)
onoremap <buffer> <silent> \r= :call RBrOpenCloseLs(1)
vnoremap <buffer> <silent> \ro :call RObjBrowser()
onoremap <buffer> <silent> \ro :call RObjBrowser()
vnoremap <buffer> <silent> \rb :call RAction("plotsumm", "v")
vnoremap <buffer> <silent> \rg :call RAction("plot", "v")
vnoremap <buffer> <silent> \rs :call RAction("summary", "v")
onoremap <buffer> <silent> \rb :call RAction("plotsumm")
onoremap <buffer> <silent> \rg :call RAction("plot")
onoremap <buffer> <silent> \rs :call RAction("summary")
vnoremap <buffer> <silent> \rh :call RAction("help")
onoremap <buffer> <silent> \rh :call RAction("help")
vnoremap <buffer> <silent> \re :call RAction("example")
onoremap <buffer> <silent> \re :call RAction("example")
vnoremap <buffer> <silent> \ra :call RAction("args")
onoremap <buffer> <silent> \ra :call RAction("args")
vnoremap <buffer> <silent> \tp :call RAction("printtab", "v")
vnoremap <buffer> <silent> \td :call RAction("dputtab", "v")
vnoremap <buffer> <silent> \rv :call RAction("viewdf", "v")
vnoremap <buffer> <silent> \rt :call RAction("str", "v")
vnoremap <buffer> <silent> \rn :call RAction("nvim.names", "v")
vnoremap <buffer> <silent> \rp :call RAction("print", "v")
onoremap <buffer> <silent> \tp :call RAction("printtab")
onoremap <buffer> <silent> \td :call RAction("dputtab")
onoremap <buffer> <silent> \rv :call RAction("viewdf")
onoremap <buffer> <silent> \rt :call RAction("str")
onoremap <buffer> <silent> \rn :call RAction("nvim.names")
onoremap <buffer> <silent> \rp :call RAction("print")
vnoremap <buffer> <silent> \rm :call RClearAll()
onoremap <buffer> <silent> \rm :call RClearAll()
vnoremap <buffer> <silent> \rr :call RClearConsole()
onoremap <buffer> <silent> \rr :call RClearConsole()
vnoremap <buffer> <silent> \rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> \rl :call g:SendCmdToR("ls()")
let s:cpo_save=&cpo
set cpo&vim
noremap <buffer> <silent> \r<Right> :call RSendPartOfLine("right", 0)
noremap <buffer> <silent> \r<Left> :call RSendPartOfLine("left", 0)
vnoremap <buffer> <silent> \o :call RWarningMsg("This command does not work over a selection of lines.")
onoremap <buffer> <silent> \o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> \d :call SendLineToR("down")0
noremap <buffer> <silent> \l :call SendLineToR("stay")
noremap <buffer> <silent> \pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> \pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> \pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> \pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> \so :call SendSelectionToR("echo", "stay", "NewtabInsert")
vnoremap <buffer> <silent> \sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> \sd :call SendSelectionToR("silent", "down")
vnoremap <buffer> <silent> \se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> \ss :call SendSelectionToR("silent", "stay")
vnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
noremap <buffer> <silent> \ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> \bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> \be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> \bb :call SendMBlockToR("silent", "stay")
noremap <buffer> <silent> \ks :call RSpin()
noremap <buffer> <silent> \ao :call ShowRout()
noremap <buffer> <silent> \ae :call SendFileToR("echo")
noremap <buffer> <silent> \aa :call SendFileToR("silent")
vnoremap <buffer> <silent> \; :call MovePosRCodeComment("selection")
onoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
vnoremap <buffer> <silent> \xu :call RSimpleCommentLine("selection", "u")
onoremap <buffer> <silent> \xu :call RSimpleCommentLine("normal", "u")
vnoremap <buffer> <silent> \xc :call RSimpleCommentLine("selection", "c")
onoremap <buffer> <silent> \xc :call RSimpleCommentLine("normal", "c")
vnoremap <buffer> <silent> \xx :call RComment("selection")
onoremap <buffer> <silent> \xx :call RComment("normal")
vnoremap <buffer> <silent> \rw :call RQuit('save')
onoremap <buffer> <silent> \rw :call RQuit('save')
vnoremap <buffer> <silent> \rq :call RQuit('nosave')
onoremap <buffer> <silent> \rq :call RQuit('nosave')
vnoremap <buffer> <silent> \rc :call StartR("custom")
onoremap <buffer> <silent> \rc :call StartR("custom")
vnoremap <buffer> <silent> \rf :call StartR("R")
onoremap <buffer> <silent> \rf :call StartR("R")
inoremap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> _ :call ReplaceUnderS()a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#',:###,:##,:#
setlocal commentstring=#\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#CompleteFunc
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'r'
setlocal filetype=r
endif
setlocal fixendofline
setlocal foldcolumn=1
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=cq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=CompleteR
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal signcolumn=auto
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'r'
setlocal syntax=r
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal termkey=
setlocal termsize=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
8,17fold
18,27fold
28,37fold
38,47fold
48,57fold
59,67fold
68,72fold
73,80fold
58,81fold
85,88fold
89,94fold
83,98fold
101,104fold
105,110fold
99,114fold
117,120fold
121,126fold
115,130fold
133,136fold
137,142fold
131,146fold
148,160fold
161,165fold
169,175fold
176,182fold
166,182fold
147,183fold
185,194fold
197,202fold
203,208fold
209,213fold
195,217fold
220,225fold
226,231fold
232,236fold
218,240fold
243,248fold
249,254fold
255,259fold
241,263fold
266,271fold
272,277fold
278,282fold
264,286fold
287,300fold
302,305fold
306,309fold
310,313fold
314,317fold
318,322fold
323,331fold
301,331fold
333,344fold
347,353fold
354,358fold
359,362fold
363,368fold
345,372fold
375,381fold
382,386fold
387,390fold
391,396fold
373,400fold
403,409fold
410,414fold
415,418fold
419,424fold
401,428fold
431,437fold
438,442fold
443,446fold
447,452fold
429,456fold
457,470fold
472,477fold
478,483fold
484,489fold
490,495fold
496,500fold
505,511fold
512,518fold
501,518fold
471,519fold
521,537fold
538,556fold
558,563fold
564,568fold
569,573fold
584,592fold
593,601fold
602,610fold
611,619fold
557,626fold
58
normal! zo
58
normal! zc
83
normal! zo
83
normal! zc
99
normal! zo
99
normal! zc
115
normal! zo
115
normal! zc
131
normal! zo
131
normal! zc
147
normal! zo
166
normal! zo
166
normal! zc
147
normal! zc
195
normal! zo
195
normal! zc
218
normal! zo
218
normal! zc
241
normal! zo
241
normal! zc
264
normal! zo
264
normal! zc
301
normal! zo
301
normal! zc
345
normal! zo
345
normal! zc
373
normal! zo
373
normal! zc
401
normal! zo
401
normal! zc
429
normal! zo
429
normal! zc
471
normal! zo
501
normal! zo
501
normal! zc
471
normal! zc
557
normal! zo
557
normal! zc
let s:l = 83 - ((81 * winheight(0) + 21) / 42)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
83
normal! 01|
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
